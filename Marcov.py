# -*- coding: utf-8 -*-
"""CPU_perc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W7p0Ue1X8B9U1saEg7YzyYmxR-YV7Fgk
"""

import numpy as np
import pandas as pd
from datetime import datetime

from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

from google.colab import drive
drive.mount('/content/drive')

"""# Data preprocessing"""

data = pd.read_csv('/content/drive/My Drive/Book1.csv')
# load data from google drive

"""Extract timestamps"""

# extract timestamps and convert them (float) to string (to use it in strptime)
timestamps = data['timestamp'].astype(str)
# print(len(timestamps))
print(len(timestamps))
#function to validate the timestamps if there are in %m/%d/%Y %H:%M format
def validate_timestamp(timestamp_str):
    try:
        datetime.strptime(timestamp_str, "%m/%d/%Y %H:%M")
        return True
    except ValueError:
        return False

# to split the time part and add it to times list
nan_indx_time=[]
times=[]
for i, timestamp in enumerate(timestamps):
  if validate_timestamp(timestamp) and i not in nan_indx_use:
      timestamp_components = timestamp.split(" ")
      times.append(timestamp_components[1])
  else:
    nan_indx_time.append(i)


print(nan_indx_time)
print(times)
print(len(times))

# #convert stringtimes to time type and validate them
ttimes = [datetime.strptime(time, '%H:%M').time() for time in times]
print(ttimes)

# Convert time values to numerical features
def convert_time_to_features(time):
    hour = time.hour
    minute = time.minute
    # return [hour, minute]
    return hour

time_features = [convert_time_to_features(time) for time in ttimes]
print(time_features)

cpu_usage = data['cpu_usage'].astype(str)
nan_indx_use=[]
cpu_usage_perc = []
for i, use in enumerate(cpu_usage):
  if len(use) != 3 and i not in nan_indx_time:
    cpu_usage_perc.append(use)
  if len(use) == 3:
    nan_indx_use.append(i)

fl_cpu_usage_perc = [float(x) for x in cpu_usage_perc]

print(len(cpu_usage_perc))

# X = np.array(time_features).reshape(-1, 2)
# # -1 showed the number of rows is based on the data, and 2 is the number of columns(hour and minute)
# # print(X)
# Y = np.array(cpu_usage_perc)
# # print(Y)

import matplotlib.pyplot as plt

# Calculate the average CPU usage for each hour
average_usage_dict = {}
for hour, usage in zip(time_features, fl_cpu_usage_perc):
    if hour in average_usage_dict:
        average_usage_dict[hour].append(usage)
    else:
        average_usage_dict[hour] = [usage]

average_usage_list = []
for hour, usage_list in average_usage_dict.items():
    average_usage = sum(usage_list) / len(usage_list)
    average_usage_list.append((hour, average_usage))

# Extract hours and average usage from the list of tuples
hours = [hour for hour, usage in average_usage_list]
average_usage = [usage for hour, usage in average_usage_list]

x_axis = hours
y_axis = average_usage
plt.bar(x_axis, y_axis, width=1)
plt.xlabel("Hours")
plt.ylabel("CPU_Use")
plt.show()

